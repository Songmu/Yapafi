## コントローラーの動きについて

コントローラーは大まかな処理の流れが規定されており、各タイミングにおいて呼び出されるメソッドを、必要に応じて継承先のコントローラーでオーバーライドすることで挙動の変更を行います。

### アプリケーション共通のコントローラクラスを定義する

アプリケーションを作る際には、各コントローラはYapafi_Controllerを直接継承するのではなくアプリケーション共通の親クラスを定義すると良いでしょう。

![共通親クラスの定義](../common/chart/extend.png)

共通親クラスはYapafi_Controllerを継承しさえしていれば、末端のコントローラとは違い、配置場所や命名規則等は特に決まりはありません。ただし、app以下には配置しないほうが良いでしょう。


### メソッド呼び出しの流れ

![処理の流れ](../common/chart/controller_flow.png)

#### void: init() メソッド

初期化処理を記述します。Yapafi_Controllerでは、`session_start()`だけが呼び出されています。

末端のコントローラでは特にオーバーライドの必要は無いと思いますが、共通コントローラクラスでアプリケーションにおける共通の初期化処理を定義しておくと良いと思います。  (例えば、オープン日、クローズ日チェックなど)

#### boolean: sessionCheck() メソッド

セッションに格納されている値が適正かをチェックします。このメソッドは真理値を返します。Yapafi_Controllerでは`return true;`だけが記述されています。(セッションチェック無し)

例えば、セッションにユーザー情報を持っているかどうか等を確認します。

これも、共通コントローラクラスにアプリケーションのセッションの持ち方を定義しておいて、セッションチェックの不要なコントローラ(ログインページ・ログアウトページ・特に認証の必要ないページ)においては、`return true;`を記述しておくと良いでしょう。

このメソッドが`true`を返した場合、`run*()`メソッドが呼ばれ、`false`を返した場合は`sessionErrorHandler()`メソッドが呼ばれます。


#### void: sessionErrorHandler() メソッド

セッションチェックに失敗した場合にこのメソッドが呼ばれます。Yapafi_Controllerでは403エラーをクライアントに返すようにしています。

ログインページにリダイレクトする等の処理を行うと良いでしょう。

このメソッドが呼び出された場合、その後テンプレート呼び出し等もされず処理が終了するので注意してください。


#### string: run*() メソッド

[Tutorial](../tutorial)でも書きましたが、ここがメインロジックになります。コントローラー毎にこのメソッドの定義が必ず必要です。

HTTPメソッドにより呼び出されるメソッドが異なります。

* runGet()
* runPost()
* runPut()
* runDelete()
* runHead()

上記メソッドが定義されていない場合、フォールバックとして`run()`メソッドが呼び出されます。`run()`が定義されていない場合には、例外が投げられます。

`stash`メンバ変数に連想配列形式で値をセットすることにより、テンプレートへ値を受け渡すことが出来ます。

また、このメソッド内で、`setView()`メソッドを呼び出すことにより、テンプレートファイルを明示的に指定できます。

<aside><p>HTTPメソッドがPOSTの時に、URLの引数に_get=DELETE, _get=PUTをつけると、<code>renPut()</code>、<code>runDelete</code>が呼び出されます。(擬似REST機能)</p></aside>


#### void: setHeader() メソッド

このメソッドでHTTPヘッダーをセットします。これもアプリケーション共通コントローラ内で、共通ヘッダーを定義しておくと良いでしょう。

各コントローラーではHTMLではない別の形式で返したい場合などに、オーバーライドすると良いでしょう。

#### string: render() メソッド

テンプレートを呼び出して、描画を行います。このメソッドは特にオーバーライドの必要もないし、オーバーライドできません。


### メンバ変数について

#### public stash : Array

テンプレートに受け渡される値を連想配列形式で格納します。


#### protected ext : String

アクセスされたURLの拡張子が(存在した場合)自動的に格納されます。

#### protected allow_exts : Array

URLに許容する拡張子のリストを配列で指定します。この配列に存在しない拡張子をURLとして持つことは出来ません。

#### protected has_args : Int

持ちうるURL引数の数(最大値)を指定します。(デフォルト0)

URL引数とは例えば、<samp>controller_name/arg1/arg2</samp>における、arg1, arg2 の部分です。この部分が args メンバ配列に格納されます。


#### protected args : Array

URL引数が配列として格納されます。

例えば、<samp>user/15</samp>というURLがあった場合、User_cコントローラクラスが呼び出され、args[0]に15が入ります。(`has_args`が1以上の場合)


#### protected output_encoding : PHP encoding

クライアントに返すレスポンスをUTF-8以外にしたい場合にこの変数をオーバーライドします。

指定できる値はPHPのエンコーディング文字列(SJIS, SJIS-win, JIS等)になります。


## 正しいURIについて

思想的な部分に触れつつ、現状の対応案を示します。

### URLはリソースにマッピングされる

URLはファイルにマッピングされている訳ではなく、リソースにマッピングされていると考えます。それは昔「ファイル=リソース」だったというだけの話で、RDBにデータを持っている場合などはその限りではありません。

例えば、以下のようなURLを考えて見ましょう。

	http://www.example.com/user/15.html

これは、データベース上のuserテーブルのid15番の人の情報をポイントしていると考えられます。  
(もちろんこれはRDBに寄った考え方で、リソースがRDBである必要はありません。)

また、末尾の.htmlはレスポンスのデータ形式を示しています。この場合は、html形式のデータが返ってくることが示されています。

これは「htmlファイルがサーバーに存在することを示す訳ではない」点に気をつけてください。

この原則を適用すると、URIに応じてデータ形式を動的に出し分けると言ったこともイメージが湧くかと思います。

	http://www.example.com/user/15.json
	http://www.example.com/user/15.xml

.php .cgi .do等開発言語・フレームワークに依存した拡張子は本質的には好ましくありません。これだと開発言語が変わった際などにURLを変更することにもなってしまいます。

また、".ja" などファイル形式ではなく、別のメタ情報として。

### HTTPメソッドの違い

現状主にGETメソッドとPOSTメソッドを使うことになりますが、以下のように切り分けられます。

- GET メソッド : データの閲覧に使う
- POSTメソッド : データの更新に使う

例えば、先ほどの例だと以下のような考え方になります。

- GET の場合 : userテーブルのid15番の人の情報の「閲覧」を行う(SELECT文)
- POSTの場合 : userテーブルのid15番の人の情報の「更新」を行う(INSERT,UPDATE,DELETE文)

また、POSTリクエストではデータの更新のみを行うべきで、同時にビューも返すと言った実装はするべきではありません。ではどうするかと言うと次のURLに対してリダイレクトを行うのが正しい処理になります。これをポストバックリダイレクト方式と呼んだりします。

これは思想的な点だけではなく、ロジックの独立性を保つ上でも、ブラウザへの対応の観点からも重要です。  
(POSTでビューを返してしまうとブラウザバックを行った際に「情報の再送信を行いますか？」などと文言が表示されてしまい、ユーザーを混乱させることになるます。)

<aside>HTTPメソッドにはPUT, DELETEもあり、この辺りが使えるとまた色々楽しくなるのですがそれはまた別の話。</aside>


### 正しいエラーコードを返すと言うこと





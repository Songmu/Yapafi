## 正しいURIについて

思想的な部分に触れつつ、現状の対応案を示します。

**「URLを見るとどういう情報が得られるか(どういう操作をしているか)をユーザーに示すことが出来る」**

というところが理想です。

### URLはリソースにマッピングされる

**URLはファイルにマッピングされている訳ではなく、リソースにマッピングされている**と考えます。昔「ファイル=リソース」だったというだけの話で、RDBにデータを持っている場合などはその限りではありません。

例えば、以下のようなURLを考えて見ましょう。

    http://www.example.com/user/15.html

これは、データベース上のuserテーブルのid15番の人の情報をポイントしていると考えられます。  
(もちろんこれはRDBに寄った考え方で、リソースがRDBである必要はありません。)

末尾の.htmlはメタ情報を示します。この場合レスポンスのデータ形式を示しています。html形式のデータが返ってくることが示されています。

これは**「htmlファイルがサーバーに存在することを示す訳ではない」**点に気をつけてください。  
(このページも末尾が.htmlになっていますが中身はPHPです。)

この原則を適用すると、URLに応じてデータ形式を動的に出し分けると言ったこともイメージが湧くかと思います。

    http://www.example.com/user/15.json
    http://www.example.com/user/15.xml
    http://www.example.com/user/15.ja.html

最後のURLには.jaと書かれています。メタ情報はファイル形式であるとは限りません(この場合は言語情報)。

.php .cgi .do等開発言語・フレームワークに依存した拡張子は本質的には好ましくありません。これだと開発言語が変わった際などにURLを変更することにもなってしまいます。


### HTTPメソッドの違い

現状主にGETメソッドとPOSTメソッドを使うことになりますが、以下のように切り分けられます。

- GET メソッド : データの閲覧に使う
- POSTメソッド : データの更新に使う

例えば、先ほどURLの例だと以下のような考え方になります。

- GET の場合 : userテーブルのid15番の人の情報の「閲覧」を行う(SELECT文)
- POSTの場合 : userテーブルのid15番の人の情報の「更新」を行う(INSERT,UPDATE,DELETE文)

また、POSTリクエストではデータの更新のみを行うべきで、同時にビューも返すと言った実装はするべきではありません。

これは思想的な点だけではなく、ロジックの独立性を保つ上でも、ブラウザへの対応の観点からも重要です。  
(POSTでビューを返してしまうとブラウザバックを行った際に「情報の再送信を行いますか？」などと文言が表示されてしまい、ユーザーを混乱させることになるます。)

ではどうするかと言うとPOSTリクエストに対しては、次のURLに対して303リダイレクトを返すのが正しい処理になります。これをポストバックリダイレクト方式と呼んだりします。  
(これは現状のブラウザで操作されることを前提とした場合の話です。)

<aside>HTTPメソッドにはPUT, DELETEもあり、この辺りが使えるとまた色々楽しくなるのですがそれはまた別の話。</aside>

### 正しいレスポンスコードを返すと言うこと

正しいレスポンスコードを返しましょう。エラー画面等を200で返すとかはありえません。Webはブラウザのみで閲覧されるとは限らないからです。

どんなレスポンスが帰ってきて

最低限抑えておくべきレスポンスコード

200 OK
:   正常にレスポンスが返ったとき。

301 Moved Parmanently
:   リソースの**恒久的移動**を意味します。サイトの移転等URLが変更になったときにはこのレスポンスを返すとよいでしょう。SEO的に意味が有ります。GoogleのPageRank等も引き継がれるとされています。

302 Found
:   仕様とブラウザの実装に開きがあり、歴史的経緯からHTTP1.0ではTemporaly Redirectでしたが、HTTP1.0ではFoundに変更になりました。余り使わない方が良いと思います。

303 See Other
:   ポストバックリダイレクト方式の時はこれを使うと良いんじゃないかと。



<http://www.studyinghttp.net/>




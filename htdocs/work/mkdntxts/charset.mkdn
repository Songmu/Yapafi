## 文字コードについて

コンピュータは数しか扱うことができません。では、どうやって文字を表しているかというと、文字に番号を割り当てて管理しているわけです。

例えば、"A"は65番(16進数で0x41)、数字の"1"は49番(0x31)です(Asciiの場合)。数字の"1"が1番じゃないのが厄介ですね。

コンピュータのデータは1バイト(=8ビット)単位で表しますが、これだと255通りの文字しか扱うことができません。英数字記号くらいであれば十分ですが、日本語中国語に代表される他の言語すべての文字を表そうとするととてもじゃありませんが表現できません。

それに対しては、各国独自拡張で対応してきた経緯がありますが、全世界の文字を統一的に扱える規格の策定を目指してユニコードコンソーシアムが立ち上げられ、統一文字集合であるUnicodeの制定が行われています。

### 日本語で使う文字コードについて

ASCII
:   俗に言う半角英数字と記号です。1文字を1バイトで表しますが、ASCIIは7bit(0～127)までの領域しか使用していません。残りの部分(128～255)は、他の文字コードで自由に使うことができるようになっています。

Shift_JIS系
:   馴染みの深い文字コードかと思います。日本語Windowsで使われています。ASCII領域と半角カナ領域を1バイト、全角文字を2バイトで扱います。**ASCII互換**です。ただし、**全角文字の2バイト目がASCII領域とかぶっている部分がある**ので、**プログラムをするには向かない**文字コードです。

EUC-JP系
:   UNIX系OSで使われてきた日本語文字コードです。ASCII領域を1バイト、半角カナ・全角文字を2バイトで扱います。**ASCII互換**です。**半角カナも2バイト**なので注意が必要です。Shift_JISと違い、2バイト文字はASCIIの領域を使わないようになっているので、**プログラムをするのに向いています**。

ISO-2022-JP系
:   1バイトを7bitで表す7bit符号系なのが大きな特徴です。日本語の電子メールのための符号化表現として広く使われています。  
(メールは7bit/1バイトを前提としたシステムが未だ残って(いると言われて)おり、8bit符号系を使うと文字化けの原因となったりするのでなかなか乗り換えられない現状があります。ただ実際は、メールも全てUTF-8で揃えてしまっても大丈夫なはずです。)  
俗にJISコードと言われたりもしますが、JISは文字集合を示すことも多いので、あまりそう言わない方が良いでしょう。

UTF-8
:   次世代の大本命。Unicodeの符号化方式の一つです。ASCII部分を1バイト、それ以外の部分を2～6バイトの可変長で表します。**ASCII互換**です。**これからは全てこれを使うと良い**と思います。

UTF-16
:   Unicodeの符号化方式の一つです。全ての文字を2バイトで扱います。**ASCII非互換です**。UTF-16テキストを直接扱うことは少ないでしょうが、OSやプログラミング言語の内部表現として使われていたりします。また、エクセルはUnicodeテキストを書き出せるようになっていますが、その場合はUTF-16になっています。

### UnicodeとUTF-8, UTF-16の違い。

混同している人が多いのですが、明確に区別しましょう。

Unicode
:   文字集合

UTF-8, UTF-16
:   Unicodeの符号化方式

Unicodeはあくまで**文字集合**であり言うなればコンピュータとは直接関係ありません。「アラビア数字は1～10です」みたいなものです。

それをコンピュータ上でどのようなデータとして表現するかを決めるのが各種符号化方式です。代表的なものにUTF-8とUTF-16があります。

UTF-16
:   一文字を一律2バイトの**固定長**で表すコード体系です。よって**Ascii非互換**です(アルファベットも2バイトになってしまう)。固定長なのでコンピュータで扱いやすく、WindowsやJava、Pythonの内部処理はUTF-16で行われています。  
2バイトの固定長なので、65535文字までしか扱うことが出来ません。Unicodeは現在当然65535文字を超えており、その対応のために**サロゲートペア**による拡張というものが行われ、一部の文字は4バイトで一文字を表すことになってしましました。  
結果として、UTF-16が固定長であることよるメリットは薄れてしまっています。またPythonなどにはサロゲートペアで表現されている文字1文字を2文字としてカウントしてしまうバグ(仕様)があります。

UTF-8
:   一文字を1～6バイトの**可変長**で表すコード体系です。**ASCII互換**なのが大きな特徴です。つまり、UTF-16よりもデータサイズが少なくて済み、半角英数字しか使われていない欧米のASCIIテキストはそのままUTF-8テキストとして使うことができるので、Webの世界では、文字コードのUTF-8への移行がスムースに進んでいます。2010年現在、世界の半分のサイトがUTF-8を使用しています。[^1]  
Perlは内部がUTF-8で処理されており、PHPも5.4ないしは6からは内部表現がUTF-8になると言われています。(PHPは現状内部表現はバイナリ)

UTF-8の可変長符号化方式は非常にスマート[^2]で、UTF-16のサロゲートペアのようなむりやりなカッコ悪い拡張もないので、今後はUTF-8が主流になっていくと思われます。  
(ネットワークに例えると、UTF-16のサロゲートペアはIPv4のNATみたいなもので、UTF-8はIPv6みたいな感じです)

UTF-16は(一応)固定長なので、先頭から文字列を切っていく分には文字の境界が分かりやすいのですが、UTF-8はストリームの途中でどのバイトが文字の先頭バイトか判別できるようになっています。

<aside>Rubyは1.9以降、Ascii互換コード体系であれば、あらゆる内部表現をとれるようになっています。これは非常にチャレンジングな試みです。内部表現を固定しないとどうしても言語自体の実行速度が遅くなってしまうからです。</aside>

### Shift_JISとcp932(Windows-31J)

Windows上でShift_JISと呼ばれているものは、実は**Microsoftが独自拡張を行ったcp932**(Windows-31J)というコード体系で、Shift_JISとは異なります。ただ、多くの人がShift_JISと言ってしまっているのが現状です。

携帯電話のShift_JISもcp932をベースにしたShift_JISが使われており、実質インターネットの世界でShift_JISと言うとcp932になってしまっているのが現状です。

MaxはOS9までMacJapaneseというこれまたShift_JISの独自拡張が使われていましたが、OSXからはWindows-31Jも選べるようになっています。

ただし、cp932はShift_JISの上位互換というわけではなく、一部Unicodeとのマッピングの違いがあり、波ダッシュ問題等の原因となったりします。

#### Another CP932

ややこしいことにIBMもCP932というShift_JISを拡張した文字コード体系を持っています。

ですので、JavaやIBMの世界では以下のようになっています。

- CP932: IBMのCP932
- MS932: MicrosoftのCP932
- CP943: IBMがMS932に準ずる形で新たに作った文字コード
- CP943c: CP943を拡張したもの

MS932とCP943はバイト単位ではほぼ同じですが、仕様上のUnicodeへのマッピング先が異なったりするので微妙に違います。ここでも波ダッシュ問題が発生したりします。訳分かりません。


### EUC-JPの拡張[^3]

eucJP-ms
:   Microsoftのcp932に合わせて、**各ベンダーが**EUC-JPを拡張したコード体系です。CP932に入っている全ての文字を扱えるようになっています。  
PostgreSQLのEUC-JPはeucJP-msを扱います。

cp51932
:   Microsoftのcp932に合わせて、**Microsoftが**EUC-JPを拡張したコード体系です。ただし、cp932の全ての文字を網羅しているわけではありません。IBM拡張漢字に関してNEC選定部分しか入っていません。  
InternetExploreや秀丸等でEUC-JPを表示させたときに使われるのがこのコード体系です。

つまり、Windows上では、IBM拡張漢字の、NEC選定部分じゃない文字に関してはEUC-JPとして表示させることができません。

### JIS規格について

JIS第1第2水準=JIX X0208


### PHPの文字コード






[^1]:<http://googleblog.blogspot.com/2010/01/unicode-nearing-50-of-web.html>

[^2]:<http://ja.wikipedia.org/wiki/Microsoft%E3%82%B3%E3%83%BC%E3%83%89%E3%83%9A%E3%83%BC%E3%82%B8932>

[^3]: <http://msyk.at.webry.info/200511/article_2.html>


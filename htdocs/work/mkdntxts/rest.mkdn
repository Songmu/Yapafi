## 正しいURIについて

思想的な部分に触れつつ、現状の対応案を示します。

**「URLを見るとどういう情報が得られるか(どういう操作をしているか)をユーザーに示すことが出来る」**

というところが理想です。

### URLはリソースにマッピングされる

**URLはファイルにマッピングされている訳ではなく「リソース」にマッピングされている**と考えます。昔「ファイル=リソース」だったというだけの話で、RDBにデータを持っている場合などはその限りではありません。

例えば、以下のようなURLを考えて見ましょう。

<samp>http://www.example.com/user/15.html</samp>

これは、データベース上のuserテーブルのid15番の人の情報をポイントしていると考えられます。  
(もちろんこれはRDBに寄った考え方で、リソースがRDBである必要はありません。)

末尾の.htmlはメタ情報を示します。この場合レスポンスのデータ形式を示しています。html形式のデータが返ってくることが示されています。

これは**「htmlファイルがサーバーに存在することを示す訳ではない」**点に気をつけてください。  
(このページも末尾が.htmlになっていますが中身はPHPです。)

この原則を適用すると、URLに応じてデータ形式を動的に出し分けると言ったこともイメージが湧くかと思います。

<samp>http://www.example.com/user/15.json  
http://www.example.com/user/15.xml  
http://www.example.com/user/15.ja.html</samp>

最後のURLには.jaと書かれています。メタ情報はファイル形式であるとは限りません(この場合は言語情報)。

.php .cgi .do等開発言語・フレームワークに依存した拡張子は本質的には好ましくありません。これだと開発言語が変わった際などにURLを変更することにもなってしまいます。  
(例えば、Twitterは初期はRuby on Railsで書かれていましたが、今はScalaです。それでもURLは変更されていません。)

### HTTPメソッドの違い

現状のブラウザの対応状況から鑑みて、主にGETメソッドとPOSTメソッドを使うことになりますが、以下のように切り分けられます。

- GETメソッドはデータの閲覧に使う
- POSTメソッドはデータの更新に使う

GETメソッドは「冪等性」が保証されていると言われます。**つまり何度GETリクエストを送ったとしても同じ結果が返る。**ということです。他の要因がリソースを更新した場合はこの限りではありませんが、GETメソッド自体がリソースを更新することはしないということです。

「FormはPOST」と考えがちですが、これも間違いです。例えばGoogleの検索結果はGETで入力を引き渡しています。リソースの更新を行なっているのはクローラであり、リクエスト自体はリソースの更新を行わないからです。

例えば、先ほどURLの例だと以下のような考え方になります。

GET の場合
: userテーブルのid15番の人の情報の「閲覧」を行う(SELECT文)

POSTの場合
: userテーブルのid15番の人の情報の「更新」を行う(INSERT,UPDATE,DELETE文)

また、POSTリクエストではデータの更新*のみ*を行うべきで、同時にビューも返すと言った実装はするべきではありません。

これは思想的な点だけではなく、ロジックの独立性を保つ上でも、ブラウザへの対応の観点からも重要です。  
(POSTでビューを返してしまうとブラウザバックを行った際に「情報の再送信を行いますか？」などと文言が表示されてしまい、ユーザーを混乱させることになるます。)

ではどうするかと言うとPOSTリクエストに対しては、次のURLに対して303リダイレクトを返すのが正しい処理になります。これをポストバックリダイレクト方式と呼んだりします。  
(これは現状のブラウザで操作されることを前提とした場合の話です。)

<aside>HTTPメソッドにはPUT, DELETEもあり、この辺りが使えるとまた色々楽しくなりそうなのですがそれはまた別の話。</aside>


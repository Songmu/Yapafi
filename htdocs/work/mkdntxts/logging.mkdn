## 正しいロギングの薦め

ログは単にエラーを保存するためのものではありません。開発中にプログラムの流れを掴む上でも重要です。ログレベルによって出力を制御できるログモジュールを活用すると良いでしょう。

エラーが出てから場当たり的にvar_dumpなどを使うのではなく、積極的にDEBUGログの記述をするようにしましょう。Test FirstならぬLog Firstです。

例えば、Yapafiには簡易ログ関数であるlogging関数と、変数の中身をvar_dump出力形式で取得できるd関数が付属しています。以下のようにすれば、変数の中身をログファイルに出力してくれます。

    logging( d($var) );

上記のような記述をソースコード上にちりばめることにより、変数の変化の流れを追うことが出来、開発効率が上がります。

ログファイルはtail -f 等で開きっぱなしにしておくと良いでしょう。Windowsの場合、Tailsというツールが各種文字コードに対応していてお薦めです。

logging関数は第2引数にログレベルを指定することができます。省略した場合DEBUGとなります。設定ファイルでYAPAFI_LOG_LEVEL定数を指定することにより、出力レベルを切り替えることが出来ます。

YAPAFI_LOG_LEVELをINFO以上にした場合、DEBUG指定のログは出力されません。開発時にはDEBUGにしておき、リリース時にはINFO以上に変更すると良いでしょう。そうすると、リリース以降は余計なログが出力されなくなるので、開発時にいちいち気にする必要がなくなります。


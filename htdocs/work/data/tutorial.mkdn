## Tutorial

### ディレクトリ構成

  <dl class="compact">
  <dt>yapafi.php</dt>
  <dd>フレームワーク本体です。ディスパッチャもかねています</dd>
  <dt>.htaccess</dt>
  <dd>mod_rewriteのルール等が設定されています。</dd>
  <dt>yapafi.ini</dt>
  <dd>Yapafiを動かす上で必要な設定値を記述します。拡張子はiniですが、記述ルールはphpと同じです。</dd>
  <dt>app.ini</dt>
  <dd>アプリケーション固有の設定(DB接続情報等)を記述します。こちらも同様に記述ルールはPHPと同じです。</dd>
  <dt>app/</dt>
  <dd>ここにコントローラを配置します。</dd>
  <dt>view/</dt>
  <dd>ここにビューを配置します。</dd>
  <dt>lib/</dt>
  <dd>ここにライブラリを配置します。</dd>
  <dt>model/</dt>
  <dd>ここにモデルを配置します。</dd>
  <dt>work/</dt>
  <dd>ここはログやセッション情報が格納されます。</dd>
  </dl>
  
### インストール

ダウンロードしてきたファイルのhtdocs以下一式をアプリケーション配置ディレクトリにコピーしてください。

### .htaccessの設定

以下の行をアプリケーションの設置パスに応じて書き換えてください。

    RewriteBase /~yapafi/

これでアプリケーションにアクセスして画面が表示されれば設置は完了です。


### 実装における前提知識

コードはコントローラ、テンプレート含めて全て**UTF-8**(BOM無し)で記述してください。これは出力文字コードがShift_JISであっても同様です。

テンプレートファイル以外には、PHPコードの終端を表す**"?>"を記述してはいけません**。これは、余計な空白がバッファに送られるのを防ぐためです。

### コントローラの設置

#### URLとコントローラのマッピング

URLとコントローラ名はマッピングされており、自動でコントローラが呼び出されます。例えば、

<pre><samp>[アプリケーション配置パス]/example</samp></pre>

にアクセスがあった場合、<samp>app/example.php</samp>がコントローラとして呼び出されます。

上記のように"app/"以下に拡張子phpでコントローラを配置します。



#### 命名規則

コントローラファイル名には、

* 半角小文字アルファベット
* 半角数字
* アンダーバー

のみを使用可能です。またファイル名の先頭やアンダースコアの直後は半角小文字アルファベットしか使用できません。また、末尾をアンダースコアにすることは出来ません。

OKな例

<pre><samp>hoge.php
fuga2.php
sample_fuga.php
hoge/fuga_piyo.php  # ディレクトリによる階層分けも可能です</samp></pre>

NGな例

<pre><samp>_hoge.php           # アンダーバーが先頭にある
2hoge.php           # 数字で始まっている
fuga_2dd.php        # アンダーバーの直後に数字がある
sample_fuga_.php    # アンダーバーで終わっている
hoge/_fuga_piyo.php # ディレクトリ区切りの直後にアンダーバーがある
hOg+e.php           # 使えない記号や大文字が入っている</samp></pre>


#### ファイル名とコントローラークラスのマッピング

コントローラの雛形は以下のような感じです。

example.php

    <?php
    // Yapafi_Controllerを必ず継承します(本来は直接継承ではなく孫クラスを推奨)
    class Example_c extends Yapafi_Controller {
        function runGet() {
            // ここにGETメソッドの時の処理を記述します。
            
            // stashメンバ変数にテンプレートに差し込む文字列をセットします
            $this->stash = array( 'title' => 'example'); //テンプレートの$title変数に文字列'example'をセット
            
            // メソッドを抜けた後自動的にテンプレートが呼び出されます。
        }
        
        function runPost() {
            // ここにPOSTメソッドの時の処理を記述します。
            redirect('example'); //POST時はビューを表示せずリダイレクト推奨。
        }
    }
    // ?>を記述してはいけません。

**ファイル名に応じてクラス名が決定**されます。ファイル名をPascalCase(UpperCamelCase)に置き換え、末尾に'_c'を付与したものがクラス名になります。また、ディレクトリ区切りはアンダーバーに置き換えます。

<pre><samp>example.php            → Example_c
example_abc.php        → ExampleAbc_c
fruit_apple/orange.php → FruitApple_Orange_c</samp></pre>

コントローラでの処理終了後、テンプレートが自動で呼び出されます。テンプレートファイル名を明示的に指定したい場合は、run*メソッド内でsetViewメソッドを呼び出して以下のように記述してください。

        function runGet() {
            // ここにGETメソッドの時の処理を記述します。
            
            $this->setView( 
                'something.tpl', // 第一引数にテンプレートファイルを指定します。
                // 第二引数に配列で差込文字列を指定します
                // ($this->stashを既にセット済みの場合は省略可能です)
                array(           
                    'title' => 'example', //テンプレートの$title変数に文字列'example'をセット
                )
            );
        }

ちなみにあまり推奨しませんが、`runGet(), runPost()`メソッドを定義しないで、`run()`メソッドを定義することでGETとPOSTのロジックを共通化できます。

### モデル

モデルクラスは特に準備していません。適宜モデルを準備してください。

モデルクラスがないからと言って、コントローラに処理を書きすぎないように注意してください。コントローラ内で**データ参照・更新処理はしない**ようにしましょう。

逆にモデルは環境依存のない状態で実行できるように記述すべきで、コントローラはその受け渡しのために存在します。モデル内で**環境変数やリクエスト変数の参照はしない**ようにしましょう。

例えばモデルをCLI(バッチ)から呼び出したとしても同様の結果セットが返り、更新処理が走るように記述すべきです。

モデルはテストコードを準備し、単体で機能のテストが出来るようにしましょう。

### テンプレート

テンプレートは"view/"以下に拡張子.tplで配置します。拡張子は.tplですが記述ルールは生PHPと同じです。

コントローラ内で明示的にテンプレートファイルを指定しなかった場合、コントローラと同じファイル名のテンプレートファイルが呼び出されます。

コントローラ内でテンプレートに受け渡された連想配列は、キーが展開されて変数として使われます。

    <html>
    <body>
    <?= $title ?><!-- ←ここにtitleの中身が入ります。 -->
    </body>
    </html>

#### 自動エスケープ

セキュリティを鑑みて、テンプレートへの差込文字列は自動でHTMLエスケープされます。多重配列になっている場合でも再帰的にエスケープされます。

但し、多重配列の**キーはエスケープされません**。また、イテレータオブジェクト等を保持して値を格納している場合もエスケープ対象外です。

逆に自動エスケープの対象としたくない場合は、`raw_str`関数でラッピングすることによって、自動エスケープ対象外にすることが出来ます。ブログパーツ等、外部から取得したHTML等をそのまま差し込む場合に有効かと思いますが、何でもかんでも`raw_str`を使わないようにしてください。また、外部から取得したHTMLはそのまま信用しないようにしましょう。

    $this->stash = array(
        'string'    => '<p>sample</p>', // エスケープされる → '&lt;p$gt;sample&lt;/p$gt;'
        'hash'      => array('marks' => '<<<><<""<<>', 'test' => 'aaa'), // 配列の中身もエスケープされる
        'object'    => $some_iterator, // オブジェクトの中身はエスケープされません
        'html'      => raw_str('<p>ここはエスケープされません</p>'), // raw_str関数でラッピング
    );


`$_SESSION, $_GET, $_POST`の中身は当然自動エスケープされませんが、テンプレートでこれらの値を直接セットするのはやめましょう。


### コントローラの内部処理について



### プロジェクトの共通コントローラを定義する




### 便利関数


